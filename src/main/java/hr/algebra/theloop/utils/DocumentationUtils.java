package hr.algebra.theloop.utils;

import hr.algebra.theloop.exception.ReflectionException;

import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.stream.Stream;


public class DocumentationUtils {

    private DocumentationUtils() {}

    private static final String BASE_PATH = "target/classes/";
    private static final String HTML_DOCUMENTATION_FILE_NAME = "doc/documentation.html";
    private static final String CLASS_FILE_EXTENSION = ".class";

    public static void generateDocumentation() throws ReflectionException {
        try (Stream<Path> paths = Files.walk(Paths.get(BASE_PATH))) {
            List<Path> classList = paths.filter(path ->
                            path.getFileName().toString().endsWith(CLASS_FILE_EXTENSION) &&
                                    Character.isUpperCase(path.getFileName().toString().charAt(0)))
                    .toList();

            String htmlCode = generateHtmlCode(classList);

            Files.createDirectories(Paths.get("doc"));
            Files.writeString(Path.of(HTML_DOCUMENTATION_FILE_NAME), htmlCode);

        } catch (IOException e) {
            throw new ReflectionException("Error while generating HTML documentation!", e);
        }
    }

    private static String generateHtmlCode(List<Path> classList) throws ReflectionException {
        StringBuilder sb = new StringBuilder();

        String htmlStart = """
                <!DOCTYPE html>
                <html lang="en">
                <head>
                <title>The Loop - Java Documentation</title>
                </head>
                <body>
                <h1>The Loop - Class Documentation (Generated by Reflection API)</h1>
                """;

        sb.append(htmlStart);

        for (Path classPath : classList) {
            String className = classPath.toString()
                    .substring(BASE_PATH.length(),
                            classPath.toString().length() - CLASS_FILE_EXTENSION.length())
                    .replace("\\", ".")
                    .replace("/", ".");

            try {
                Class<?> clazz = Class.forName(className);

                sb.append("<h2>Class name: ").append(className).append("</h2>");

                if(clazz.getConstructors().length > 0) {
                    sb.append("<h3>List of constructors:</h3>");
                    for (Constructor<?> constructor : clazz.getConstructors()) {
                        sb.append("<h4>Constructor: ").append(constructor).append("</h4>");
                    }
                } else {
                    sb.append("<h3>No constructors</h3>");
                }

                Method[] methods = clazz.getDeclaredMethods();
                if(methods.length > 0) {
                    sb.append("<h3>List of methods:</h3>");
                    for (Method method : methods) {
                        sb.append("<h4>Method: ").append(method).append("</h4>");
                    }
                } else {
                    sb.append("<h3>No methods</h3>");
                }

            } catch (ClassNotFoundException e) {
                throw new ReflectionException("Class not found while generating HTML documentation", e);
            }
        }

        String htmlEnd = """
                </body>
                </html>
                """;

        sb.append(htmlEnd);
        return sb.toString();
    }
}